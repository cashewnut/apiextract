如何判断两个API是否等价？
强相关
1、有返回值的情况下，两者返回值相同；
2、DAPI调用了RAPI；->DAPI的返回值与RAPI有关。
3、RAPI调用了DAPI；->RAPI的返回值与DAPI有关。
弱相关
文档中提示，返回值相同或相似，如List<->array，返回值存在父子类关系。

替换策略：
1、直接调用型->直接修改方法名
2、参数不同型->分析Dapi与Rapi内部结构，分析RAPI的参数从哪里来，与DAPI的参数有什么区别，通过数据流得到所有的参数构造过程
3、invoker不同->
    1)判断invoker是否是参数Dapi方法的参数；
    2)判断invoker是否是Dapi所属类的成员，如果是，考虑如何拿到(get方法/直接用)
    3)判断是否有父子类关系，如果有可以直接用；
    4)判断是否为静态方法，如果是可以直接调用；
    5)构造对象->1、判断是否单例，可以通过内部方法获取；2、调用默认构造函数(同时要给用户友好的提示，表示该方法的替换有风险)
4、参数数据流分析->
    1)对于D->R，分析D方法体，找到RAPI，分析RAPI参数的数据流。参数来历：
        #1.直接由D方法获得，通过数据流分析找到对应关系与修改路径；
        #2.参数DAPI所对应类的成员，首先判断是否是静态方法，再判断能否使用get方法获得，最后判断是否是public类型，如果不行就直接返回object.field；
        #3.参数是DAPI中创建的，记录创建路径；
        #4.参数是方法，如果是DAPI所对应类中的方法，则加上invoker，不是的话直接返回Class.method。
        #5.DAPI方法体中，如果RAPI有Invoker，则通过数据流判断Invoker来历，如果Invoker是方法，则判断是否是DAPI所对应类的方法。(311)
    2)对于R->D，分析R方法体，找到DAPI，分析RAPI到DAPI的参数流。以注释的形式展示给用户。(只能解决部分情况)
    3)对于D=R，分析两者的方法体，如果同时调用了相同的API，通过参数数据流分析参数的对应情况。(只能解决部分情况)
    4)如果D和R之间不存在关系，则通过文档分析，确定invoker，参数通过参数类型分析。如果参数分析结果无法对应，则提示用户替换方法。
5、方法组合型，通过文档得到组合的方式。

参数对应策略：
1、从文档中利用数据流的分析找到对应关系；(以下 表示如果没找到)
2、判断是否是某个类的静态属性；
3、判断是否是该对象的成员，如果是则尝试调用get方法或
直接获取；
4、如果无法从方法本身出发，那就从文档中参数命名获取；
5、如果还是无法找到对应关系，就只能友好提醒用户自己去想办法了。

参数类型是否相等判定条件：->是否有父子类关系

DAPI和RAPI结构相等判断条件：
1、对于有返回值的情况，追溯返回值，判断返回值是否相等，如果返回值是两个不同的方法，就继续追溯两个方法是否相等；
2、对于没有返回值的情况，提取两者的API调用进行比对，如果阈值大于一个值则认为两个API相等。

D->R:间接调用只追两次。
1、首先判断是否重复，通过数据流分析，如果参数和返回值类型能对上，返回1，如果返回值对不上，返回7；
2、在D的方法体中判断是否存在参数整合的情况，如果存在，返回4；
3、如果D中有参数没被R使用，则是关闭参数，返回3；
4、如果R中有使用D没有的参数，则是开放参数，返回2。

R->D:间接调用只追两次。
1、首先判断是否重复，通过数据流分析，如果参数和返回值类型能对上，返回1，如果返回值对不上，返回7；
2、在R的方法体中判断D的参数是否来自于R某个对象参数的属性，如果有则存在参数整合，返回4；
3、判断是否存在API整合；
4、如果D使用的参数有R未声明的，则属于关闭参数，返回3；
5、如果R声明的参数D未使用，则属于开放参数，返回2。

R==D:
1、首先判断是否重复，判断结构是否相等[DAPI和RAPI结构相等判断条件]，根据参数使用情况判断参数对应关系，如果参数返回值对得上，返回1，返回值对不上，返回7；
2、判断参数整合情况，判断方法如同[R->D 2]，返回4；
3、如果D中有参数没在R中找到对应，属于关闭参数，返回3；
4、如果R的参数未在D中，属于开放参数，返回2。

263,264,265有问题。
73-88等一系列有问题。

好的例子：301




